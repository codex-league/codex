package ${controllerPackagePath};

import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.fasterxml.jackson.core.type.TypeReference;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import pub.codex.apix.annotations.Api;
import pub.codex.apix.annotations.ApiOperation;
import pub.codex.apix.annotations.ApiParam;
import pub.codex.apix.annotations.constant.Describe;
import pub.codex.apix.annotations.group.VG;
import pub.codex.common.factory.RFactory;
import pub.codex.common.models.R;
import pub.codex.core.template.utils.WhereUtils;
import ${entityPackagePath}.${className}Entity;
import ${servicePackagePath}.${className}Service;

/**
 * ${comments}
 *
 * @date ${datetime}
 */
@Api("${comments}")
@RestController
public class ${className}Controller {

#if(${interfaceType})
    @Autowired
    ${className}Service ${classname}Service;
#end
#foreach (${type} in ${interfaceType})

#if(${type}=="add")
    /**
    * 新增接口
    * @param ${classname}Entity
    * @return
    */
    @ApiOperation("新增接口")
    @PostMapping("/${classname}")
    public R add(@RequestBody @Validated(VG.Add.class)${className}Entity ${classname}Entity) {
        ${classname}Service.save(${classname}Entity);
        return RFactory.build();
    }
#end
#if(${type}=="del")

    /**
     * 删除接口
     * @param id 根据ID删除
     * @return
     */
    @ApiOperation("删除接口")
    @DeleteMapping("/${classname}/{id}")
    public R delete(@ApiParam(Describe.ID) @PathVariable("id") String id) {
        ${classname}Service.removeById(id);
        return RFactory.build();
    }
#end
#if(${type}=="update")

    /**
     * 更新接口
     * @param ${classname}Entity
     * @return
     */
    @ApiOperation("更新接口")
    @PutMapping("/${classname}")
    public R update(@RequestBody @Validated(VG.Update.class)${className}Entity ${classname}Entity) {
        ${classname}Service.updateById(${classname}Entity);
        return RFactory.build();
    }
#end
#if(${type}=="detail")

    /**
     * 详情接口
     * @param id 根据ID查询
     * @return
     */
    @ApiOperation("详情接口")
    @GetMapping("/${classname}/{id}")
    public R<${className}Entity> detail(@ApiParam(Describe.ID) @PathVariable("id") String id) {
        return RFactory.build(${className}Entity.class, ${classname}Service.getById(id));
    }
#end
#if(${type}=="list")

    /**
     * 列表接口
     * @param  where JSON条件
     *         pageIndex 当前页
     *         pageSize 页数
     * @return
     */
    @ApiOperation("列表接口")
    @GetMapping("/${classname}")
    public R<Page<${className}Entity>> list(@ApiParam(Describe.WHERE) @RequestParam(required = false) String where,
                  @ApiParam(Describe.KEYWORD) @RequestParam(required = false) String keyword,
                  @ApiParam(Describe.PAGE_INDEX) @RequestParam(defaultValue = "0") Long pageIndex,
                  @ApiParam(Describe.PAGE_SIZE) @RequestParam(defaultValue = "10") Long pageSize) {

        QueryWrapper<${className}Entity> entity = new QueryWrapper<>();

        WhereUtils.setWhereAndKeyword(entity, where, keyword);

        return RFactory.build(new TypeReference<Page<${className}Entity>>() {
        }, ${classname}Service.page(new Page<>(pageIndex, pageSize), entity));
    }
#end
#end

}


